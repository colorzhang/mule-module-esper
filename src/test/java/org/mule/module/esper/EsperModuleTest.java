/**
 * Copyright (c) MuleSoft, Inc. All rights reserved. http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.md file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.esper;

import org.junit.Test;
import org.mule.api.MuleMessage;
import org.mule.module.client.MuleClient;
import org.mule.tck.FunctionalTestCase;

import java.util.HashMap;
import java.util.Map;

public class EsperModuleTest extends FunctionalTestCase {
    @Override
    protected String getConfigResources() {
        return "mule-config.xml";
    }

    @Test
    public void testCanInsertAndListenForAnObjectEvent() throws Exception {

        MuleClient client = new MuleClient(muleContext);
        DummyEvent dummyEvent = new DummyEvent();
        client.dispatch("vm://in", dummyEvent, null);

        MuleMessage response = client.request("vm://out", 15000);
        assertNotNull(response);
        assertEquals("The output payload does not match the input payload", dummyEvent, response.getPayload());

        MuleMessage event = client.request("vm://events", 15000);
        assertNotNull(event);
        assertEquals(1L, event.getPayload());
    }

    @Test
    public void testCanInsertAndListenForAMapEvent() throws Exception {
        MuleClient client = new MuleClient(muleContext);
        Map<String, String> mapEvent = new HashMap<String, String>();
        mapEvent.put("foo", "1234");

        client.dispatch("vm://map.in", mapEvent, null);

        MuleMessage response = client.request("vm://map.out", 15000);
        assertNotNull(response);
        assertEquals("The output payload does not match the input payload", mapEvent, response.getPayload());

        MuleMessage event = client.request("vm://map.events", 15000);
        assertNotNull(event);
        assertEquals(1L, event.getPayload());
    }

    @Test
    public void testCanInsertAndListenForAnXMLEvent() throws Exception {
        MuleClient client = new MuleClient(muleContext);
        String xmlEvent = "<event><foo>1234</foo></event>";

        client.dispatch("vm://xml.in", xmlEvent, null);

        MuleMessage response = client.request("vm://xml.out", 15000);
        assertNotNull(response);

        MuleMessage event = client.request("vm://xml.events", 15000);
        assertNotNull(event);
        assertEquals(1L, event.getPayload());
    }


    @Test
    public void testCanFilterOnEvents() throws Exception {
        MuleClient client = new MuleClient(muleContext);
        for (int i = 0; i < 5; i++) {
            client.dispatch("vm://filtered.in", new DummyEvent(), null);
        }

        int receivedCount = 0;

        for (int i = 0; i < 4; i++) {
            MuleMessage response = client.request("vm://filtered.out", 15000);
            assertNotNull(response);
            receivedCount++;
        }

        assertEquals(4, receivedCount);
        MuleMessage response = client.request("vm://filtered.out", 5000);
        assertNull(response);
    }

}
